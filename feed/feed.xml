<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
	<title>Matvii Hodovaniuk Notes</title>
	<subtitle>I am writing about my experiences.</subtitle>
	
	<link href="http://matvii.hodovani.uk/feed/feed.xml" rel="self"/>
	<link href="http://matvii.hodovani.uk/"/>
	<updated>2020-09-06T03:00:00+03:00</updated>
	<id>http://matvii.hodovani.uk/</id>
	<author>
		<name>Matvii Hodovaniuk</name>
		<email>matvii@hodovani.uk</email>
	</author>
	
	<entry>
		<title>The Basic Tools</title>
		<link href="http://matvii.hodovani.uk/posts/basic-tools/"/>
		<updated>2020-06-17T03:00:00+03:00</updated>
		<id>http://matvii.hodovani.uk/posts/basic-tools/</id>
		<content type="html">&lt;p&gt;&lt;strong&gt;Keep Knowledge in plain text&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;14.-the-power-of-plain-text&quot;&gt;14.-The Power of Plain Text &lt;a class=&quot;direct-link&quot; href=&quot;#14.-the-power-of-plain-text&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&quot;drawbacks&quot;&gt;Drawbacks &lt;a class=&quot;direct-link&quot; href=&quot;#drawbacks&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;more space&lt;/li&gt;
&lt;li&gt;computationally more expensive&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;the-power-of-text&quot;&gt;The Power of Text &lt;a class=&quot;direct-link&quot; href=&quot;#the-power-of-text&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Insurance against obsolescence: you will always have a chance to be able to use text.&lt;/li&gt;
&lt;li&gt;Leverage: Virtually every tool in the computing can operate on plain text.&lt;/li&gt;
&lt;li&gt;Easier testing&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;15.-shell-games&quot;&gt;15.-Shell Games &lt;a class=&quot;direct-link&quot; href=&quot;#15.-shell-games&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Use the power of command Shells&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Can&#39;t you do everything equally well by pointing and clicking in a GUI?&lt;br&gt;
&lt;strong&gt;No&lt;/strong&gt;. A benefit of GUIs is &lt;em&gt;WYSIWYG&lt;/em&gt;—what you see is what you get. The disadvantage is &lt;em&gt;WYSIAYG&lt;/em&gt;—what you see is all you get.&lt;/p&gt;
&lt;h2 id=&quot;16.-power-editing&quot;&gt;16.-Power Editing &lt;a class=&quot;direct-link&quot; href=&quot;#16.-power-editing&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Use a Single Editor Well&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;editor-%22must%22-features&quot;&gt;Editor &amp;quot;must&amp;quot; features &lt;a class=&quot;direct-link&quot; href=&quot;#editor-%22must%22-features&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Configurable&lt;/li&gt;
&lt;li&gt;Extensible&lt;/li&gt;
&lt;li&gt;Programmable&lt;/li&gt;
&lt;li&gt;Syntax highlighting&lt;/li&gt;
&lt;li&gt;Auto-completion&lt;/li&gt;
&lt;li&gt;Auto-indentation&lt;/li&gt;
&lt;li&gt;Initial code or document boilerplate&lt;/li&gt;
&lt;li&gt;Tie-in to help systems&lt;/li&gt;
&lt;li&gt;IDE-like features (compile, debug, and so on)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;17.-source-code-control&quot;&gt;17.-Source Code Control &lt;a class=&quot;direct-link&quot; href=&quot;#17.-source-code-control&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Always Use Source Code Control&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;18.-debugging&quot;&gt;18.-Debugging &lt;a class=&quot;direct-link&quot; href=&quot;#18.-debugging&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Fix the Problem, Not the Blame&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Don&#39;t Panic&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;a-debugging-mindset&quot;&gt;A Debugging Mindset &lt;a class=&quot;direct-link&quot; href=&quot;#a-debugging-mindset&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Don&#39;t waste a single neuron on the train of thought that begins &amp;quot;but that can&#39;t happen&amp;quot; because quite clearly it can, and has.&lt;br&gt;
Try to discover the root cause of a problem, not just this particular appearance of it.&lt;/p&gt;
&lt;h3 id=&quot;where-to-start&quot;&gt;Where to Start &lt;a class=&quot;direct-link&quot; href=&quot;#where-to-start&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Before you start, check the warnings or better remove all of them.&lt;/li&gt;
&lt;li&gt;You first need to be accurate in your observations and data.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;debugging-strategies&quot;&gt;Debugging Strategies &lt;a class=&quot;direct-link&quot; href=&quot;#debugging-strategies&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;h4 id=&quot;bug-reproduction&quot;&gt;Bug Reproduction &lt;a class=&quot;direct-link&quot; href=&quot;#bug-reproduction&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;The best way to start fixing a bug is to make it reproducible.&lt;/li&gt;
&lt;li&gt;The second best way is to make it reproducible with a &lt;em&gt;single command&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;visualize-your-data&quot;&gt;Visualize Your Data &lt;a class=&quot;direct-link&quot; href=&quot;#visualize-your-data&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Use the tools that the debugger offers you. Pen and paper can also help.&lt;/p&gt;
&lt;h4 id=&quot;tracing&quot;&gt;Tracing &lt;a class=&quot;direct-link&quot; href=&quot;#tracing&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Now what happens before and after.&lt;/p&gt;
&lt;h4 id=&quot;rubber-ducking&quot;&gt;Rubber Ducking &lt;a class=&quot;direct-link&quot; href=&quot;#rubber-ducking&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Explain the bug to someone else.&lt;/p&gt;
&lt;h4 id=&quot;process-of-elimination&quot;&gt;Process of Elimination &lt;a class=&quot;direct-link&quot; href=&quot;#process-of-elimination&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;It is possible that a bug exists in the OS, the compiler, or a third-party product—but this should not be your first thought.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&amp;quot;select&amp;quot; Isn&#39;t Broken&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;the-element-of-surprise&quot;&gt;The Element of Surprise &lt;a class=&quot;direct-link&quot; href=&quot;#the-element-of-surprise&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Don&#39;t Assume It—Prove It&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;debugging-checklist&quot;&gt;Debugging Checklist &lt;a class=&quot;direct-link&quot; href=&quot;#debugging-checklist&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Is the problem being reported a direct result of the underlying bug, or merely asymptom?&lt;/li&gt;
&lt;li&gt;Is the bug really in the compiler? Is it in the OS? Or is it in your code?&lt;/li&gt;
&lt;li&gt;If you explained this problem in detail to a coworker, what would you say?&lt;/li&gt;
&lt;li&gt;If the suspect code passes its unit tests, are the tests complete enough? What happens if you run the unit test with this data?&lt;/li&gt;
&lt;li&gt;Do the conditions that caused this bug exist anywhere else in the system?&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;19.-text-manipulation&quot;&gt;19.-Text Manipulation &lt;a class=&quot;direct-link&quot; href=&quot;#19.-text-manipulation&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Learn a Text Manipulation Language&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;20.-code-generators&quot;&gt;20.-Code Generators &lt;a class=&quot;direct-link&quot; href=&quot;#20.-code-generators&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Write Code That Writes Code&lt;/strong&gt;&lt;br&gt;
Two main types of code generators:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Passive code generators&lt;/strong&gt; are run once to produce a result. They are basically parameterized templates, generating a given output from a set of inputs.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Active code generators&lt;/strong&gt; are used each time their results are required. Take a single representation of some piece of knowledge and convert it into all the forms your application needs.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;code-generators-needn&#39;t-be-complex&quot;&gt;Code Generators Needn&#39;t Be Complex &lt;a class=&quot;direct-link&quot; href=&quot;#code-generators-needn&#39;t-be-complex&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Keep the input format simple, and the code generator becomes simple.&lt;/p&gt;
&lt;h3 id=&quot;code-generators-needn&#39;t-generate-code&quot;&gt;Code Generators Needn&#39;t Generate Code &lt;a class=&quot;direct-link&quot; href=&quot;#code-generators-needn&#39;t-generate-code&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;You can use code generators to write just about any output: HTML, XML, plain text - any text that might be an input somewhere&lt;br&gt;
else in your project.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>How to build this blog?</title>
		<link href="http://matvii.hodovani.uk/posts/firstpost/"/>
		<updated>2020-06-17T03:00:00+03:00</updated>
		<id>http://matvii.hodovani.uk/posts/firstpost/</id>
		<content type="html">&lt;p&gt;I used an &lt;a href=&quot;https://www.11ty.dev/&quot;&gt;11ty&lt;/a&gt; base blog as a start template. You can find it &lt;a href=&quot;https://github.com/11ty/eleventy-base-blog#getting-started&quot;&gt;here&lt;/a&gt;.&lt;br&gt;
Please, follow the steps in &lt;a href=&quot;http://readme.md/&quot;&gt;README.md&lt;/a&gt; to create a blog.&lt;/p&gt;
&lt;p&gt;I used &lt;a href=&quot;https://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt; to publish my blog. A &lt;a href=&quot;https://github.com/hodovani/hodovani.github.io&quot;&gt;link&lt;/a&gt; to a blog repository.&lt;/p&gt;
&lt;p&gt;You need to deploy your blog to the GitHub Pages repository to publish it.&lt;/p&gt;
&lt;p&gt;I made changes to &lt;code&gt;.eleventy.js&lt;/code&gt; to build blog to the root folder. I want to&lt;br&gt;
have one repository that is responsible for the blog. So this one contains&lt;br&gt;
builded blog and a a source code.&lt;/p&gt;
&lt;p&gt;I added Google Analytics to track and report website traffic. Here is a &lt;a href=&quot;https://support.google.com/analytics/answer/1008080?hl=en&quot;&gt;link&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You can find previous versions of this blog &lt;a href=&quot;https://github.com/hodovani/hodovani.github.io/commits/master/_source/posts/firstpost.md&quot;&gt;here&lt;/a&gt;&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>How to automate drawing?</title>
		<link href="http://matvii.hodovani.uk/posts/how-to-automate-drawing/"/>
		<updated>2020-06-18T03:00:00+03:00</updated>
		<id>http://matvii.hodovani.uk/posts/how-to-automate-drawing/</id>
		<content type="html">&lt;p&gt;I used &lt;a href=&quot;https://www.thingiverse.com/thing:2349232&quot;&gt;this&lt;/a&gt; tutorial to assemble a drawing machine.&lt;br&gt;
Please follow the instructions inside the repo to make the same.&lt;/p&gt;
&lt;p&gt;The cost of parts are approximately 100$. But you have to buy additional tools to assemble the machine.&lt;/p&gt;
&lt;p&gt;Here is a video that shows my result.&lt;br&gt;
The next step would be to add a servo to support Z axis.&lt;/p&gt;
&lt;iframe src=&quot;https://www.youtube.com/embed/jHqsLbBZ8Ak&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
</content>
	</entry>
	
	<entry>
		<title>A Pragmatic Approach</title>
		<link href="http://matvii.hodovani.uk/posts/pragmatic-approach/"/>
		<updated>2020-09-05T03:00:00+03:00</updated>
		<id>http://matvii.hodovani.uk/posts/pragmatic-approach/</id>
		<content type="html">&lt;h2 id=&quot;the-evils-of-duplication&quot;&gt;The Evils of Duplication &lt;a class=&quot;direct-link&quot; href=&quot;#the-evils-of-duplication&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The problem arises when you need to change a representation of things that are across all the code base.&lt;br&gt;
Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;DRY—Don&#39;t Repeat Yourself&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Types of duplication:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Imposed duplication&lt;/strong&gt; Developers feel they have no choice—the environment seems to require duplication.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Inadvertent duplication&lt;/strong&gt; Developers don&#39;t realize that they are duplicating information.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Impatient duplication&lt;/strong&gt; Developers get lazy and duplicate because it seems easier.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Interdeveloper duplication&lt;/strong&gt; Multiple people on a team (or on different teams) duplicate a piece of information.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Make it easy to reuse&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;orthogonality&quot;&gt;Orthogonality &lt;a class=&quot;direct-link&quot; href=&quot;#orthogonality&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Two or more things are orthogonal if changes in one do not affect any of the others. Also called &lt;em&gt;cohesion&lt;/em&gt;.&lt;br&gt;
Write &amp;quot;shy&amp;quot; code.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Eliminate Effects Between Unrelated Things&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Benefits:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Gain Productivity
&lt;ul&gt;
&lt;li&gt;Changes are localized&lt;/li&gt;
&lt;li&gt;Promotes reuse&lt;/li&gt;
&lt;li&gt;M x N orthogonal components do more than M x N non orthogonal components&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Reduce Risk
&lt;ul&gt;
&lt;li&gt;Diseased sections or code are isolated&lt;/li&gt;
&lt;li&gt;Are better tested&lt;/li&gt;
&lt;li&gt;Not tied to a product or platform&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Project Teams: Functionality is divided&lt;/li&gt;
&lt;li&gt;Design: Easier to design a complete project through its components&lt;/li&gt;
&lt;li&gt;Toolkits and Libraries: Choose wisely to keep orthogonality&lt;/li&gt;
&lt;li&gt;Coding: In order to keep orthogonality when adding code do:
&lt;ul&gt;
&lt;li&gt;Keep your code decoupled&lt;/li&gt;
&lt;li&gt;Avoid global data&lt;/li&gt;
&lt;li&gt;Avoid similar functions&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Testing: Orthogonal systems are easier to test.&lt;/li&gt;
&lt;li&gt;Documentation: Also gain quality&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;reversibility&quot;&gt;Reversibility &lt;a class=&quot;direct-link&quot; href=&quot;#reversibility&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Be prepared for changes.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;There are no Final Decisions.&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;tracer-bullets&quot;&gt;Tracer Bullets &lt;a class=&quot;direct-link&quot; href=&quot;#tracer-bullets&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In new projects your users requirements may be vague. Use of new algorithms, techniques, languages, or libraries unknowns will come. And environment will change over time before you are done.&lt;br&gt;
We&#39;re looking for something that gets us from a requirement to some aspect of the final system quickly, visibly, and repeatably.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Use Tracer Bullets to Find the Target&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Advantages:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Users get to see something working early&lt;/li&gt;
&lt;li&gt;Developers build a structure to work in&lt;/li&gt;
&lt;li&gt;You have an integration platform&lt;/li&gt;
&lt;li&gt;You have something to demonstrate&lt;/li&gt;
&lt;li&gt;You have a better feel for progress&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;tracer-bullets-don&#39;t-always-hit-their-target&quot;&gt;Tracer Bullets Don&#39;t Always Hit Their Target &lt;a class=&quot;direct-link&quot; href=&quot;#tracer-bullets-don&#39;t-always-hit-their-target&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Tracer bullets show what you&#39;re hitting. This may not always be the target. You then adjust your aim until they&#39;re on target. That&#39;s the point.&lt;/p&gt;
&lt;h3 id=&quot;tracer-code-versus-prototyping&quot;&gt;Tracer Code versus Prototyping &lt;a class=&quot;direct-link&quot; href=&quot;#tracer-code-versus-prototyping&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;With a prototype, you&#39;re aiming to explore specific aspects of the final system.&lt;br&gt;
Tracer code is used to know how the application as a whole hangs together.&lt;/p&gt;
&lt;p&gt;Prototyping generates disposable code.&lt;br&gt;
Tracer code is lean but complete, and forms part of the skeleton of the final system.&lt;/p&gt;
&lt;h2 id=&quot;prototypes-and-post-it-notes&quot;&gt;Prototypes and Post-it Notes &lt;a class=&quot;direct-link&quot; href=&quot;#prototypes-and-post-it-notes&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We build software prototypes to analyze and expose risk, and to offer chances for correction at a greatly reduced cost.&lt;/p&gt;
&lt;p&gt;Prototype anything that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;carries risk&lt;/li&gt;
&lt;li&gt;hasn&#39;t been tried before&lt;/li&gt;
&lt;li&gt;is absolutely critical to the final system&lt;/li&gt;
&lt;li&gt;is unproven&lt;/li&gt;
&lt;li&gt;is experimental&lt;/li&gt;
&lt;li&gt;is doubtful&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Samples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Architecture&lt;/li&gt;
&lt;li&gt;New functionality in an existing system&lt;/li&gt;
&lt;li&gt;Structure or contents of external data&lt;/li&gt;
&lt;li&gt;Third-party tools or components&lt;/li&gt;
&lt;li&gt;Performance issues&lt;/li&gt;
&lt;li&gt;User interface design&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Prototype to Learn&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Avoid details:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Correctness&lt;/li&gt;
&lt;li&gt;Completeness&lt;/li&gt;
&lt;li&gt;Robustness&lt;/li&gt;
&lt;li&gt;Style&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Prototyping Architecture:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Are the responsibilities of the major components well defined and appropriate?&lt;/li&gt;
&lt;li&gt;Are the collaborations between major components well defined?&lt;/li&gt;
&lt;li&gt;Is coupling minimized?&lt;/li&gt;
&lt;li&gt;Can you identify potential sources of duplication?&lt;/li&gt;
&lt;li&gt;Are interface definitions and constraints acceptable?&lt;/li&gt;
&lt;li&gt;Does every module have an access path to the data it needs during execution?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Never deploy the prototype&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;domain-languages&quot;&gt;Domain Languages &lt;a class=&quot;direct-link&quot; href=&quot;#domain-languages&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Program Close to the Problem domain&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;estimating&quot;&gt;Estimating &lt;a class=&quot;direct-link&quot; href=&quot;#estimating&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Estimate to Avoid Surprises&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;how-accurate-is-accurate-enough%3F&quot;&gt;How Accurate Is Accurate Enough? &lt;a class=&quot;direct-link&quot; href=&quot;#how-accurate-is-accurate-enough%3F&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;First:&lt;/strong&gt; Do they need high accuracy, or are they looking for a ballpark figure?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Second:&lt;/strong&gt; Scale time estimates properly&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Duration&lt;/th&gt;
&lt;th&gt;Quote estimate in&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1-15 days&lt;/td&gt;
&lt;td&gt;days&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3-8 weeks&lt;/td&gt;
&lt;td&gt;weeks&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;8-30 weeks&lt;/td&gt;
&lt;td&gt;months&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;30+ weeks&lt;/td&gt;
&lt;td&gt;think hard before giving an estimate&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&quot;where-do-estimates-come-from%3F&quot;&gt;Where Do Estimates Come From? &lt;a class=&quot;direct-link&quot; href=&quot;#where-do-estimates-come-from%3F&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Ask someone who&#39;s been in a similar situation in the past.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Understand What&#39;s Being Asked&lt;/li&gt;
&lt;li&gt;Build a Model of the System&lt;/li&gt;
&lt;li&gt;Break the Model into Components&lt;/li&gt;
&lt;li&gt;Give Each Parameter a Value&lt;/li&gt;
&lt;li&gt;Calculate the Answers&lt;/li&gt;
&lt;li&gt;Keep Track of Your Estimating Prowess&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;estimating-project-schedules&quot;&gt;Estimating Project Schedules &lt;a class=&quot;direct-link&quot; href=&quot;#estimating-project-schedules&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The only way to determine the timetable for a project is by gaining experience on that same project.&lt;br&gt;
Practice incremental development, repeating the following steps:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Guess estimation&lt;/li&gt;
&lt;li&gt;Check requirements&lt;/li&gt;
&lt;li&gt;Analyze risk&lt;/li&gt;
&lt;li&gt;Design, implement, integrate&lt;/li&gt;
&lt;li&gt;Validate with the users&lt;/li&gt;
&lt;li&gt;Repeat&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The refinement and confidence in the schedule gets better and better each iteration&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Iterate the Schedule with the Code&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;what-to-say-when-asked-for-an-estimate&quot;&gt;What to Say When Asked for an Estimate &lt;a class=&quot;direct-link&quot; href=&quot;#what-to-say-when-asked-for-an-estimate&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;&amp;quot;I&#39;ll get back to you.&amp;quot;&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;challenges&quot;&gt;Challenges &lt;a class=&quot;direct-link&quot; href=&quot;#challenges&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Start keeping a log of your estimates. For each, track how accurate you turned out to be. If your error was greater than 50%, try to find out where your estimate went wrong.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>A Pragmatic Paranoia</title>
		<link href="http://matvii.hodovani.uk/posts/pragmatic-paranoia/"/>
		<updated>2020-09-05T03:00:00+03:00</updated>
		<id>http://matvii.hodovani.uk/posts/pragmatic-paranoia/</id>
		<content type="html">&lt;p&gt;&lt;strong&gt;You can&#39;t write Perfect Software&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;No one in the brief history of computing has ever written a piece of perfect software.&lt;br&gt;
Pragmatic Programmers don&#39;t trust themselves, either.&lt;/p&gt;
&lt;h2 id=&quot;design-by-contract&quot;&gt;Design by Contract &lt;a class=&quot;direct-link&quot; href=&quot;#design-by-contract&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;A correct program is one that does no more and no less than it claims to do.&lt;br&gt;
Use:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Preconditions&lt;/li&gt;
&lt;li&gt;Postconditions&lt;/li&gt;
&lt;li&gt;Invariants&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Design with Contracts&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Write &amp;quot;lazy&amp;quot; code: be strict in what you will accept before you begin, and promise as little as possible in return.&lt;/p&gt;
&lt;h3 id=&quot;implementing-dbc&quot;&gt;Implementing DBC &lt;a class=&quot;direct-link&quot; href=&quot;#implementing-dbc&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Simply enumerating at design time:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;what the input domain range is&lt;/li&gt;
&lt;li&gt;what the boundary conditions are&lt;/li&gt;
&lt;li&gt;what the routine promises to deliver (and what it doesn&#39;t)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;assertions&quot;&gt;Assertions &lt;a class=&quot;direct-link&quot; href=&quot;#assertions&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;You can use assertions to apply DBC in some range. (Assertions are not propagated in subclasses)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;DBC enforce Crashing Early&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;invariants&quot;&gt;Invariants &lt;a class=&quot;direct-link&quot; href=&quot;#invariants&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Loop Invariants: Is true before and during the loop therefore also when the loop finishes&lt;/li&gt;
&lt;li&gt;Semantic Invariants: ie the error should be on the side of not processing a transaction rather than processing a duplicate transaction.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;dead-programs-tell-no-lies&quot;&gt;Dead Programs Tell No Lies &lt;a class=&quot;direct-link&quot; href=&quot;#dead-programs-tell-no-lies&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;All errors give you information. Pragmatic Programmers tell themselves that if there is an error, something very, very bad has happened.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Crash Early&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;A dead program normally does a lot less damage than a crippled one.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;When your code discovers that something that was supposed to be impossible just happened, your&lt;br&gt;
program is no longer viable.&lt;/p&gt;
&lt;h2 id=&quot;assertive-programming&quot;&gt;Assertive Programming &lt;a class=&quot;direct-link&quot; href=&quot;#assertive-programming&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;If It Can&#39;t Happen, Use Assertions to Ensure That It Won&#39;t&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Assertions are also useful checks on an algorithm&#39;s operation.&lt;/li&gt;
&lt;li&gt;Don&#39;t use assertions in place of real error handling.&lt;/li&gt;
&lt;li&gt;Leave Assertions Turned On, unless you have critical performance issues.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;when-to-use-exceptions&quot;&gt;When to Use Exceptions &lt;a class=&quot;direct-link&quot; href=&quot;#when-to-use-exceptions&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Use Exceptions for Exceptional Problems&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;what-is-exceptional%3F&quot;&gt;What Is Exceptional? &lt;a class=&quot;direct-link&quot; href=&quot;#what-is-exceptional%3F&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The program must run if all the exception handlers are removed&lt;br&gt;
If your code tries to open a file for reading and that file does not exist, should an exception be raised&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Yes: If the file should have been there&lt;/li&gt;
&lt;li&gt;No: If you have no idea whether the file should exist or not&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;how-to-balance-resources&quot;&gt;How to Balance Resources &lt;a class=&quot;direct-link&quot; href=&quot;#how-to-balance-resources&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When managing resources: memory, transactions, threads, flies, timers—all kinds of things with limited availability, we have to close, finish, delete, deallocate them when we are done.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Finish What You Start&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;nest-allocations&quot;&gt;Nest Allocations &lt;a class=&quot;direct-link&quot; href=&quot;#nest-allocations&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;1.-Deallocate resources in the opposite order to that in which you allocate them&lt;/li&gt;
&lt;li&gt;2.-When allocating the same set of resources in different places in your code, always allocate them in the same order (prevent deadlocks)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;objects-and-exceptions&quot;&gt;Objects and Exceptions &lt;a class=&quot;direct-link&quot; href=&quot;#objects-and-exceptions&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Use &lt;code&gt;finally&lt;/code&gt; to free resources.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>A Pragmatic Philosophy</title>
		<link href="http://matvii.hodovani.uk/posts/pragmatic-philosophy/"/>
		<updated>2020-09-05T03:00:00+03:00</updated>
		<id>http://matvii.hodovani.uk/posts/pragmatic-philosophy/</id>
		<content type="html">&lt;p&gt;Why spend your life developing software unless you care about doing it well?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Think! About Your Work&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Turn off the autopilot and take control. Constantly critique and appraise your work.&lt;/p&gt;
&lt;h2 id=&quot;the-cat-ate-my-source-code&quot;&gt;The Cat Ate My Source Code &lt;a class=&quot;direct-link&quot; href=&quot;#the-cat-ate-my-source-code&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Provide Options, Don&#39;t Make Lame Excuses&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Instead of excuses, provide options. Don&#39;t say it can&#39;t be done; explain what can be done to salvage the situation.&lt;/p&gt;
&lt;h2 id=&quot;software-entropy&quot;&gt;Software Entropy &lt;a class=&quot;direct-link&quot; href=&quot;#software-entropy&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;One broken window, left unrepaired for any substantial length of time, instills in the inhabitants of the building a sense of abandonment—a sense that the powers that be don&#39;t care about the building. So another window gets broken. People start littering. Graffiti appears. Serious structural damage begins. In a relatively short space of time, the building becomes damaged beyond the owner&#39;s desire to fix it, and the sense of abandonment becomes reality.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Don&#39;t Live with Broken Windows&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Don&#39;t mess up the carpet when fixing the broken window.&lt;/p&gt;
&lt;h2 id=&quot;stone-soup-and-boiled-frogs&quot;&gt;Stone Soup and Boiled Frogs &lt;a class=&quot;direct-link&quot; href=&quot;#stone-soup-and-boiled-frogs&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It&#39;s time to bring out the stones. Work out what you can reasonably ask for. Develop it well. Once you&#39;ve got it, show people, and let them marvel. Then say &amp;quot;of course, it would be better if we added….&amp;quot;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;People find it easier to join an ongoing success.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Be a Catalyst for Change&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Most software disasters start out too small to notice, and most project overruns happen a day at a time.&lt;/p&gt;
&lt;p&gt;If you take a frog and drop it into boiling water, it will jump straight back out again. However, if you place the frog in a pan of cold water, then gradually heat it, the frog won&#39;t notice the slow increase in temperature and will stay put until cooked.&lt;/p&gt;
&lt;p&gt;Don&#39;t be like the frog. Keep an eye on the big picture.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Remember the Big Picture&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;good-enough-soup&quot;&gt;Good enough soup &lt;a class=&quot;direct-link&quot; href=&quot;#good-enough-soup&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The scope and quality of the system you produce should be specified as part of that system&#39;s requirements.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Make Quality a Requirements Issue&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Great software today is often preferable to perfect software tomorrow. &lt;strong&gt;Know When to Stop&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;your-knowledge-portfolio&quot;&gt;Your Knowledge Portfolio &lt;a class=&quot;direct-link&quot; href=&quot;#your-knowledge-portfolio&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;An investment in knowledge always pays the best interest.&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Serious investors invest regularly—as a habit.&lt;/li&gt;
&lt;li&gt;Diversification is the key to long-term success.&lt;/li&gt;
&lt;li&gt;Smart investors balance their portfolios between conservative and high-risk,high-reward investments.&lt;/li&gt;
&lt;li&gt;Investors try to buy low and sell high for maximum return.&lt;/li&gt;
&lt;li&gt;Portfolios should be reviewed and rebalanced periodically&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;building-your-portfolio&quot;&gt;Building Your Portfolio &lt;a class=&quot;direct-link&quot; href=&quot;#building-your-portfolio&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Invest regularly&lt;/li&gt;
&lt;li&gt;Diversify&lt;/li&gt;
&lt;li&gt;Manage risk&lt;/li&gt;
&lt;li&gt;Buy low, sell High&lt;/li&gt;
&lt;li&gt;Review and rebalance&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Invest Regularly in Your Knowledge Portfolio&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;goals&quot;&gt;Goals &lt;a class=&quot;direct-link&quot; href=&quot;#goals&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Learn at least one new language every year.&lt;/li&gt;
&lt;li&gt;Read a technical book each quarter.&lt;/li&gt;
&lt;li&gt;Read nontechnical books, too.&lt;/li&gt;
&lt;li&gt;Take classes.&lt;/li&gt;
&lt;li&gt;Participate in local user groups.&lt;/li&gt;
&lt;li&gt;Experiment with different environments.&lt;/li&gt;
&lt;li&gt;Stay current.&lt;/li&gt;
&lt;li&gt;Get wired.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You need to ensure that the knowledge in your portfolio is accurate and unswayed by either vendor or media hype.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Critically Analyze What You Read and Hear&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;communicate&quot;&gt;Communicate &lt;a class=&quot;direct-link&quot; href=&quot;#communicate&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Know what you want to say. Plan what you want to say. Write an outline.&lt;/li&gt;
&lt;li&gt;Know your audience. (WISDOM acrostic)
&lt;ul&gt;
&lt;li&gt;What they &lt;strong&gt;Want&lt;/strong&gt;?&lt;/li&gt;
&lt;li&gt;What is their &lt;strong&gt;Interest&lt;/strong&gt;?&lt;/li&gt;
&lt;li&gt;How &lt;strong&gt;Sophisticated&lt;/strong&gt; are they?&lt;/li&gt;
&lt;li&gt;How much &lt;strong&gt;Detail&lt;/strong&gt; they want?&lt;/li&gt;
&lt;li&gt;Who do you want to &lt;strong&gt;Own&lt;/strong&gt; the information?&lt;/li&gt;
&lt;li&gt;How can you &lt;strong&gt;Motivate&lt;/strong&gt; them to listen?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Choose your moment: Understanding when your audience needs to hear your information.&lt;/li&gt;
&lt;li&gt;Choose a style: Just the facts, large bound reports, a simple memo.&lt;/li&gt;
&lt;li&gt;Make it look good: Add good-looking vehicle to your important ideas and engage your audience.&lt;/li&gt;
&lt;li&gt;Involve your audience: Get their feedback, and pick their brains.&lt;/li&gt;
&lt;li&gt;Be a listener: Encourage people to talk by asking questions.&lt;/li&gt;
&lt;li&gt;Get back to people: Keep people informed afterwards.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;It&#39;s Both What You Say and the Way You Say It&lt;/strong&gt;&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>The Basic Tools</title>
		<link href="http://matvii.hodovani.uk/posts/bend-or-break/"/>
		<updated>2020-09-06T03:00:00+03:00</updated>
		<id>http://matvii.hodovani.uk/posts/bend-or-break/</id>
		<content type="html">&lt;h2 id=&quot;decoupling-and-the-law-of-demeter&quot;&gt;Decoupling and the Law of Demeter &lt;a class=&quot;direct-link&quot; href=&quot;#decoupling-and-the-law-of-demeter&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&quot;minimize-coupling&quot;&gt;Minimize Coupling &lt;a class=&quot;direct-link&quot; href=&quot;#minimize-coupling&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Be careful about how many other modules you interact with and how you came to interact with them.&lt;/p&gt;
&lt;p&gt;Traversing relationships between objects directly can quickly lead to a combinatorial explosion.&lt;/p&gt;
&lt;pre class=&quot;language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;&lt;br&gt;	book&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;pages&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;br&gt;&lt;br&gt;	&lt;span class=&quot;token comment&quot;&gt;// Instead, we&#39;re supposed to go with:&lt;/span&gt;&lt;br&gt;&lt;br&gt;	book&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;textOfLastPage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Symptoms:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Large projects where the command to link a unit test is longer than the test program itself&lt;/li&gt;
&lt;li&gt;&amp;quot;Simple&amp;quot; changes to one module that propagate through unrelated modules in the system&lt;/li&gt;
&lt;li&gt;Developers who are afraid to change code because they aren&#39;t sure what might be affected&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;the-law-of-demeter-for-functions&quot;&gt;The Law of Demeter for Functions &lt;a class=&quot;direct-link&quot; href=&quot;#the-law-of-demeter-for-functions&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The Law of Demeter for functions states that any method of an object should call only methods belonging to:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;br&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Demeter&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;	&lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;A&lt;/span&gt; a&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br&gt;	&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token constant&quot;&gt;B&lt;/span&gt; b&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br&gt;		a&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; 							&lt;span class=&quot;token comment&quot;&gt;//itself&lt;/span&gt;&lt;br&gt;		b&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; 							&lt;span class=&quot;token comment&quot;&gt;//any parameters that were passed to the method&lt;/span&gt;&lt;br&gt;		&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Z&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; 					&lt;span class=&quot;token comment&quot;&gt;// any object it created&lt;/span&gt;&lt;br&gt;		Singleton&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;INSTANCE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; 		&lt;span class=&quot;token comment&quot;&gt;// any directly held component&lt;/span&gt;&lt;br&gt;	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Minimize Coupling Between Modules&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;does-it-really-make-a-difference%3F&quot;&gt;Does It Really Make a Difference? &lt;a class=&quot;direct-link&quot; href=&quot;#does-it-really-make-a-difference%3F&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Using The Law of Demeter will make your code more adaptable and robust, but at a cost:&lt;br&gt;
you will be writing a large number of wrapper methods that simply forward the request on to a delegate. imposing both a runtime cost and a space overhead.&lt;br&gt;
Balance the pros and cons for your particular application.&lt;/p&gt;
&lt;h2 id=&quot;metaprogramming&quot;&gt;Metaprogramming &lt;a class=&quot;direct-link&quot; href=&quot;#metaprogramming&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&amp;quot;Out with the details!&amp;quot; Get them out of the code. While we&#39;re at it, we can make our code highly configurable and &amp;quot;soft&amp;quot;—that is, easily adaptable to changes.&lt;/p&gt;
&lt;h3 id=&quot;dynamic-configuration&quot;&gt;Dynamic Configuration &lt;a class=&quot;direct-link&quot; href=&quot;#dynamic-configuration&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Configure, Don&#39;t Integrate&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;metadata-driven-applications&quot;&gt;Metadata-Driven Applications &lt;a class=&quot;direct-link&quot; href=&quot;#metadata-driven-applications&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;We want to configure and drive the application via metadata as much as possible.&lt;br&gt;
&lt;em&gt;Program for the general case, and put the specifics somewhere else —outside the compiled code base&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Put Abstractions in Code Details in Metadata&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Benefits:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It forces you to decouple your design, which results in a more flexible and adaptable program.&lt;/li&gt;
&lt;li&gt;It forces you to create a more robust, abstract design by deferring details—deferring them all the way out of the program.&lt;/li&gt;
&lt;li&gt;You can customize the application without recompiling it.&lt;/li&gt;
&lt;li&gt;Metadata can be expressed in a manner that&#39;s much closer to the problem domain than a general-purpose programming language might be.&lt;/li&gt;
&lt;li&gt;You may even be able to implement several different projects using the same application engine, but with different metadata.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;when-to-configure&quot;&gt;When to Configure &lt;a class=&quot;direct-link&quot; href=&quot;#when-to-configure&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;A flexible approach is to write programs that can reload their configuration while they&#39;re running.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;long-running server process: provide some way to reread and apply metadata while the program is running.&lt;/li&gt;
&lt;li&gt;small client GUI application: if restarts quickly no problem.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;temporal-coupling&quot;&gt;Temporal Coupling &lt;a class=&quot;direct-link&quot; href=&quot;#temporal-coupling&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Two aspects of time:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Concurrency: things happening at the same time&lt;/li&gt;
&lt;li&gt;Ordering: the relative positions of things in time&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We need to allow for concurrency and to think about decoupling any time or order dependencies.&lt;br&gt;
Reduce any time-based dependencies&lt;/p&gt;
&lt;h3 id=&quot;workflow&quot;&gt;Workflow &lt;a class=&quot;direct-link&quot; href=&quot;#workflow&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Use &lt;a href=&quot;https://upload.wikimedia.org/wikipedia/commons/thumb/e/e7/Activity_conducting.svg/2000px-Activity_conducting.svg.png&quot;&gt;activity diagrams&lt;/a&gt; to maximize parallelism by identifying activities that could be performed in parallel, but aren&#39;t.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Analyze Workflow to Improve Concurrency&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;architecture&quot;&gt;Architecture &lt;a class=&quot;direct-link&quot; href=&quot;#architecture&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Balance load among multiple consumer processes: &lt;strong&gt;the hungry consumer model.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In a hungry consumer model, you replace the central scheduler with a number of independent consumer tasks and a centralized work queue. Each consumer task grabs a piece from the work queue and goes on about the business of processing it. As each task finishes its work, it goes back to the queue for some more. This way, if any particular task gets bogged down, the others can pick up the slack, and each individual component can proceed at its own pace. Each component is temporally decoupled from the others.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Design Using Services&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;design-for-concurrency&quot;&gt;Design for Concurrency &lt;a class=&quot;direct-link&quot; href=&quot;#design-for-concurrency&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Programming with threads imposes some design constraints—and that&#39;s a good thing.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Global or static variables must be protected from concurrent access&lt;/li&gt;
&lt;li&gt;Check if you need a global variable in the first place.&lt;/li&gt;
&lt;li&gt;Consistent state information, regardless of the order of calls&lt;/li&gt;
&lt;li&gt;Objects must always be in a valid state when called, and they can be called at the most awkward times. Use class invariants, discussed in Design by Contract.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;cleaner-interfaces&quot;&gt;Cleaner Interfaces &lt;a class=&quot;direct-link&quot; href=&quot;#cleaner-interfaces&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Thinking about concurrency and time-ordered dependencies can lead you to design cleaner interfaces as well.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Always Design for Concurrency&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;deployment&quot;&gt;Deployment &lt;a class=&quot;direct-link&quot; href=&quot;#deployment&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;You can be flexible as to how the application is deployed: standalone, client-server, or n-tier.&lt;/p&gt;
&lt;p&gt;If we design to allow for concurrency, we can more easily meet scalability or performance requirements when the time comes—and if the time never comes, we still have the benefit of a cleaner design.&lt;/p&gt;
&lt;h2 id=&quot;it&#39;s-just-a-view&quot;&gt;It&#39;s Just a View &lt;a class=&quot;direct-link&quot; href=&quot;#it&#39;s-just-a-view&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&quot;publish%2Fsubscribe&quot;&gt;Publish/Subscribe &lt;a class=&quot;direct-link&quot; href=&quot;#publish%2Fsubscribe&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Objects should be able to register to receive only the events they need, and should never be sent events they don&#39;t need.&lt;/p&gt;
&lt;p&gt;Use this publish/subscribe mechanism to implement a very important design concept: the separation of a model from views of the model.&lt;/p&gt;
&lt;h3 id=&quot;model-view-controller&quot;&gt;Model-View-Controller &lt;a class=&quot;direct-link&quot; href=&quot;#model-view-controller&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Separates the model from both the GUI that represents it and the controls that manage the view.&lt;/p&gt;
&lt;p&gt;Advantage:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Support multiple views of the same data model.&lt;/li&gt;
&lt;li&gt;Use common viewers on many different data models.&lt;/li&gt;
&lt;li&gt;Support multiple controllers to provide nontraditional input mechanisms.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Separate Views from Models&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;beyond-guis&quot;&gt;Beyond GUIs &lt;a class=&quot;direct-link&quot; href=&quot;#beyond-guis&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The controller is more of a coordination mechanism, and doesn&#39;t have to be related to any sort of input device.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Model&lt;/strong&gt; The abstract data model representing the target object. The model has no direct knowledge of any views or controllers.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;View&lt;/strong&gt; A way to interpret the model. It subscribes to changes in the model and logical events from the controller.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Controller&lt;/strong&gt; A way to control the view and provide the model with new data. It publishes events to both the model and the view.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;blackboards&quot;&gt;Blackboards &lt;a class=&quot;direct-link&quot; href=&quot;#blackboards&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;A blackboard system lets us decouple our objects from each other completely, providing a forum where knowledge consumers and producers can exchange data anonymously and asynchronously.&lt;/p&gt;
&lt;h3 id=&quot;blackboard-implementations&quot;&gt;Blackboard Implementations &lt;a class=&quot;direct-link&quot; href=&quot;#blackboard-implementations&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;With Blackboard systems, you can store active objects—not just data—on the blackboard, and retrieve them by partial matching of fields (via templates and wildcards) or by subtypes.&lt;/p&gt;
&lt;p&gt;Functions that a Blackboard system should have:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;read&lt;/strong&gt; Search for and retrieve data from the space.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;write&lt;/strong&gt; Put an item into the space.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;take&lt;/strong&gt; Similar to read, but removes the item from the space as well.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;notify&lt;/strong&gt; Set up a notification to occur whenever an object is written that matches the template.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Organizing Your Blackboard by partitioning it when working on large cases.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Use Blackboards to Coordinate Workflow&lt;/strong&gt;&lt;/p&gt;
</content>
	</entry>
</feed>
