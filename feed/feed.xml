<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
	<title>Matvii Hodovaniuk Notes</title>
	<subtitle>I am writing about my experiences.</subtitle>
	
	<link href="http://matvii.hodovani.uk/feed/feed.xml" rel="self"/>
	<link href="http://matvii.hodovani.uk/"/>
	<updated>2020-09-05T03:00:00+03:00</updated>
	<id>http://matvii.hodovani.uk/</id>
	<author>
		<name>Matvii Hodovaniuk</name>
		<email>matvii@hodovani.uk</email>
	</author>
	
	<entry>
		<title>How to build this blog?</title>
		<link href="http://matvii.hodovani.uk/posts/firstpost/"/>
		<updated>2020-06-17T03:00:00+03:00</updated>
		<id>http://matvii.hodovani.uk/posts/firstpost/</id>
		<content type="html">&lt;p&gt;I used an &lt;a href=&quot;https://www.11ty.dev/&quot;&gt;11ty&lt;/a&gt; base blog as a start template. You can find it &lt;a href=&quot;https://github.com/11ty/eleventy-base-blog#getting-started&quot;&gt;here&lt;/a&gt;.&lt;br&gt;
Please, follow the steps in &lt;a href=&quot;http://readme.md/&quot;&gt;README.md&lt;/a&gt; to create a blog.&lt;/p&gt;
&lt;p&gt;I used &lt;a href=&quot;https://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt; to publish my blog. A &lt;a href=&quot;https://github.com/hodovani/hodovani.github.io&quot;&gt;link&lt;/a&gt; to a blog repository.&lt;/p&gt;
&lt;p&gt;You need to deploy your blog to the GitHub Pages repository to publish it.&lt;/p&gt;
&lt;p&gt;I made changes to &lt;code&gt;.eleventy.js&lt;/code&gt; to build blog to the root folder. I want to&lt;br&gt;
have one repository that is responsible for the blog. So this one contains&lt;br&gt;
builded blog and a a source code.&lt;/p&gt;
&lt;p&gt;I added Google Analytics to track and report website traffic. Here is a &lt;a href=&quot;https://support.google.com/analytics/answer/1008080?hl=en&quot;&gt;link&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You can find previous versions of this blog &lt;a href=&quot;https://github.com/hodovani/hodovani.github.io/commits/master/_source/posts/firstpost.md&quot;&gt;here&lt;/a&gt;&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>How to automate drawing?</title>
		<link href="http://matvii.hodovani.uk/posts/how-to-automate-drawing/"/>
		<updated>2020-06-18T03:00:00+03:00</updated>
		<id>http://matvii.hodovani.uk/posts/how-to-automate-drawing/</id>
		<content type="html">&lt;p&gt;I used &lt;a href=&quot;https://www.thingiverse.com/thing:2349232&quot;&gt;this&lt;/a&gt; tutorial to assemble a drawing machine.&lt;br&gt;
Please follow the instructions inside the repo to make the same.&lt;/p&gt;
&lt;p&gt;The cost of parts are approximately 100$. But you have to buy additional tools to assemble the machine.&lt;/p&gt;
&lt;p&gt;Here is a video that shows my result.&lt;br&gt;
The next step would be to add a servo to support Z axis.&lt;/p&gt;
&lt;iframe src=&quot;https://www.youtube.com/embed/jHqsLbBZ8Ak&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
</content>
	</entry>
	
	<entry>
		<title>A Pragmatic Approach</title>
		<link href="http://matvii.hodovani.uk/posts/pragmatic-approach/"/>
		<updated>2020-09-05T03:00:00+03:00</updated>
		<id>http://matvii.hodovani.uk/posts/pragmatic-approach/</id>
		<content type="html">&lt;h2 id=&quot;the-evils-of-duplication&quot;&gt;The Evils of Duplication &lt;a class=&quot;direct-link&quot; href=&quot;#the-evils-of-duplication&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The problem arises when you need to change a representation of things that are across all the code base.&lt;br&gt;
Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;DRY—Don&#39;t Repeat Yourself&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Types of duplication:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Imposed duplication&lt;/strong&gt; Developers feel they have no choice—the environment seems to require duplication.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Inadvertent duplication&lt;/strong&gt; Developers don&#39;t realize that they are duplicating information.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Impatient duplication&lt;/strong&gt; Developers get lazy and duplicate because it seems easier.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Interdeveloper duplication&lt;/strong&gt; Multiple people on a team (or on different teams) duplicate a piece of information.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Make it easy to reuse&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;orthogonality&quot;&gt;Orthogonality &lt;a class=&quot;direct-link&quot; href=&quot;#orthogonality&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Two or more things are orthogonal if changes in one do not affect any of the others. Also called &lt;em&gt;cohesion&lt;/em&gt;.&lt;br&gt;
Write &amp;quot;shy&amp;quot; code.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Eliminate Effects Between Unrelated Things&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Benefits:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Gain Productivity
&lt;ul&gt;
&lt;li&gt;Changes are localized&lt;/li&gt;
&lt;li&gt;Promotes reuse&lt;/li&gt;
&lt;li&gt;M x N orthogonal components do more than M x N non orthogonal components&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Reduce Risk
&lt;ul&gt;
&lt;li&gt;Diseased sections or code are isolated&lt;/li&gt;
&lt;li&gt;Are better tested&lt;/li&gt;
&lt;li&gt;Not tied to a product or platform&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Project Teams: Functionality is divided&lt;/li&gt;
&lt;li&gt;Design: Easier to design a complete project through its components&lt;/li&gt;
&lt;li&gt;Toolkits and Libraries: Choose wisely to keep orthogonality&lt;/li&gt;
&lt;li&gt;Coding: In order to keep orthogonality when adding code do:
&lt;ul&gt;
&lt;li&gt;Keep your code decoupled&lt;/li&gt;
&lt;li&gt;Avoid global data&lt;/li&gt;
&lt;li&gt;Avoid similar functions&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Testing: Orthogonal systems are easier to test.&lt;/li&gt;
&lt;li&gt;Documentation: Also gain quality&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;reversibility&quot;&gt;Reversibility &lt;a class=&quot;direct-link&quot; href=&quot;#reversibility&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Be prepared for changes.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;There are no Final Decisions.&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;tracer-bullets&quot;&gt;Tracer Bullets &lt;a class=&quot;direct-link&quot; href=&quot;#tracer-bullets&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In new projects your users requirements may be vague. Use of new algorithms, techniques, languages, or libraries unknowns will come. And environment will change over time before you are done.&lt;br&gt;
We&#39;re looking for something that gets us from a requirement to some aspect of the final system quickly, visibly, and repeatably.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Use Tracer Bullets to Find the Target&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Advantages:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Users get to see something working early&lt;/li&gt;
&lt;li&gt;Developers build a structure to work in&lt;/li&gt;
&lt;li&gt;You have an integration platform&lt;/li&gt;
&lt;li&gt;You have something to demonstrate&lt;/li&gt;
&lt;li&gt;You have a better feel for progress&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;tracer-bullets-don&#39;t-always-hit-their-target&quot;&gt;Tracer Bullets Don&#39;t Always Hit Their Target &lt;a class=&quot;direct-link&quot; href=&quot;#tracer-bullets-don&#39;t-always-hit-their-target&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Tracer bullets show what you&#39;re hitting. This may not always be the target. You then adjust your aim until they&#39;re on target. That&#39;s the point.&lt;/p&gt;
&lt;h3 id=&quot;tracer-code-versus-prototyping&quot;&gt;Tracer Code versus Prototyping &lt;a class=&quot;direct-link&quot; href=&quot;#tracer-code-versus-prototyping&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;With a prototype, you&#39;re aiming to explore specific aspects of the final system.&lt;br&gt;
Tracer code is used to know how the application as a whole hangs together.&lt;/p&gt;
&lt;p&gt;Prototyping generates disposable code.&lt;br&gt;
Tracer code is lean but complete, and forms part of the skeleton of the final system.&lt;/p&gt;
&lt;h2 id=&quot;prototypes-and-post-it-notes&quot;&gt;Prototypes and Post-it Notes &lt;a class=&quot;direct-link&quot; href=&quot;#prototypes-and-post-it-notes&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We build software prototypes to analyze and expose risk, and to offer chances for correction at a greatly reduced cost.&lt;/p&gt;
&lt;p&gt;Prototype anything that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;carries risk&lt;/li&gt;
&lt;li&gt;hasn&#39;t been tried before&lt;/li&gt;
&lt;li&gt;is absolutely critical to the final system&lt;/li&gt;
&lt;li&gt;is unproven&lt;/li&gt;
&lt;li&gt;is experimental&lt;/li&gt;
&lt;li&gt;is doubtful&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Samples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Architecture&lt;/li&gt;
&lt;li&gt;New functionality in an existing system&lt;/li&gt;
&lt;li&gt;Structure or contents of external data&lt;/li&gt;
&lt;li&gt;Third-party tools or components&lt;/li&gt;
&lt;li&gt;Performance issues&lt;/li&gt;
&lt;li&gt;User interface design&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Prototype to Learn&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Avoid details:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Correctness&lt;/li&gt;
&lt;li&gt;Completeness&lt;/li&gt;
&lt;li&gt;Robustness&lt;/li&gt;
&lt;li&gt;Style&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Prototyping Architecture:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Are the responsibilities of the major components well defined and appropriate?&lt;/li&gt;
&lt;li&gt;Are the collaborations between major components well defined?&lt;/li&gt;
&lt;li&gt;Is coupling minimized?&lt;/li&gt;
&lt;li&gt;Can you identify potential sources of duplication?&lt;/li&gt;
&lt;li&gt;Are interface definitions and constraints acceptable?&lt;/li&gt;
&lt;li&gt;Does every module have an access path to the data it needs during execution?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Never deploy the prototype&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;domain-languages&quot;&gt;Domain Languages &lt;a class=&quot;direct-link&quot; href=&quot;#domain-languages&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Program Close to the Problem domain&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;estimating&quot;&gt;Estimating &lt;a class=&quot;direct-link&quot; href=&quot;#estimating&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Estimate to Avoid Surprises&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;how-accurate-is-accurate-enough%3F&quot;&gt;How Accurate Is Accurate Enough? &lt;a class=&quot;direct-link&quot; href=&quot;#how-accurate-is-accurate-enough%3F&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;First:&lt;/strong&gt; Do they need high accuracy, or are they looking for a ballpark figure?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Second:&lt;/strong&gt; Scale time estimates properly&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Duration&lt;/th&gt;
&lt;th&gt;Quote estimate in&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1-15 days&lt;/td&gt;
&lt;td&gt;days&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3-8 weeks&lt;/td&gt;
&lt;td&gt;weeks&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;8-30 weeks&lt;/td&gt;
&lt;td&gt;months&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;30+ weeks&lt;/td&gt;
&lt;td&gt;think hard before giving an estimate&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&quot;where-do-estimates-come-from%3F&quot;&gt;Where Do Estimates Come From? &lt;a class=&quot;direct-link&quot; href=&quot;#where-do-estimates-come-from%3F&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Ask someone who&#39;s been in a similar situation in the past.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Understand What&#39;s Being Asked&lt;/li&gt;
&lt;li&gt;Build a Model of the System&lt;/li&gt;
&lt;li&gt;Break the Model into Components&lt;/li&gt;
&lt;li&gt;Give Each Parameter a Value&lt;/li&gt;
&lt;li&gt;Calculate the Answers&lt;/li&gt;
&lt;li&gt;Keep Track of Your Estimating Prowess&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;estimating-project-schedules&quot;&gt;Estimating Project Schedules &lt;a class=&quot;direct-link&quot; href=&quot;#estimating-project-schedules&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The only way to determine the timetable for a project is by gaining experience on that same project.&lt;br&gt;
Practice incremental development, repeating the following steps:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Guess estimation&lt;/li&gt;
&lt;li&gt;Check requirements&lt;/li&gt;
&lt;li&gt;Analyze risk&lt;/li&gt;
&lt;li&gt;Design, implement, integrate&lt;/li&gt;
&lt;li&gt;Validate with the users&lt;/li&gt;
&lt;li&gt;Repeat&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The refinement and confidence in the schedule gets better and better each iteration&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Iterate the Schedule with the Code&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;what-to-say-when-asked-for-an-estimate&quot;&gt;What to Say When Asked for an Estimate &lt;a class=&quot;direct-link&quot; href=&quot;#what-to-say-when-asked-for-an-estimate&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;&amp;quot;I&#39;ll get back to you.&amp;quot;&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;challenges&quot;&gt;Challenges &lt;a class=&quot;direct-link&quot; href=&quot;#challenges&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Start keeping a log of your estimates. For each, track how accurate you turned out to be. If your error was greater than 50%, try to find out where your estimate went wrong.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>A Pragmatic Philosophy</title>
		<link href="http://matvii.hodovani.uk/posts/pragmatic-philosophy/"/>
		<updated>2020-09-05T03:00:00+03:00</updated>
		<id>http://matvii.hodovani.uk/posts/pragmatic-philosophy/</id>
		<content type="html">&lt;p&gt;Why spend your life developing software unless you care about doing it well?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Think! About Your Work&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Turn off the autopilot and take control. Constantly critique and appraise your work.&lt;/p&gt;
&lt;h2 id=&quot;the-cat-ate-my-source-code&quot;&gt;The Cat Ate My Source Code &lt;a class=&quot;direct-link&quot; href=&quot;#the-cat-ate-my-source-code&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Provide Options, Don&#39;t Make Lame Excuses&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Instead of excuses, provide options. Don&#39;t say it can&#39;t be done; explain what can be done to salvage the situation.&lt;/p&gt;
&lt;h2 id=&quot;software-entropy&quot;&gt;Software Entropy &lt;a class=&quot;direct-link&quot; href=&quot;#software-entropy&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;One broken window, left unrepaired for any substantial length of time, instills in the inhabitants of the building a sense of abandonment—a sense that the powers that be don&#39;t care about the building. So another window gets broken. People start littering. Graffiti appears. Serious structural damage begins. In a relatively short space of time, the building becomes damaged beyond the owner&#39;s desire to fix it, and the sense of abandonment becomes reality.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Don&#39;t Live with Broken Windows&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Don&#39;t mess up the carpet when fixing the broken window.&lt;/p&gt;
&lt;h2 id=&quot;stone-soup-and-boiled-frogs&quot;&gt;Stone Soup and Boiled Frogs &lt;a class=&quot;direct-link&quot; href=&quot;#stone-soup-and-boiled-frogs&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It&#39;s time to bring out the stones. Work out what you can reasonably ask for. Develop it well. Once you&#39;ve got it, show people, and let them marvel. Then say &amp;quot;of course, it would be better if we added….&amp;quot;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;People find it easier to join an ongoing success.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Be a Catalyst for Change&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Most software disasters start out too small to notice, and most project overruns happen a day at a time.&lt;/p&gt;
&lt;p&gt;If you take a frog and drop it into boiling water, it will jump straight back out again. However, if you place the frog in a pan of cold water, then gradually heat it, the frog won&#39;t notice the slow increase in temperature and will stay put until cooked.&lt;/p&gt;
&lt;p&gt;Don&#39;t be like the frog. Keep an eye on the big picture.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Remember the Big Picture&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;good-enough-soup&quot;&gt;Good enough soup &lt;a class=&quot;direct-link&quot; href=&quot;#good-enough-soup&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The scope and quality of the system you produce should be specified as part of that system&#39;s requirements.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Make Quality a Requirements Issue&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Great software today is often preferable to perfect software tomorrow. &lt;strong&gt;Know When to Stop&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;your-knowledge-portfolio&quot;&gt;Your Knowledge Portfolio &lt;a class=&quot;direct-link&quot; href=&quot;#your-knowledge-portfolio&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;An investment in knowledge always pays the best interest.&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Serious investors invest regularly—as a habit.&lt;/li&gt;
&lt;li&gt;Diversification is the key to long-term success.&lt;/li&gt;
&lt;li&gt;Smart investors balance their portfolios between conservative and high-risk,high-reward investments.&lt;/li&gt;
&lt;li&gt;Investors try to buy low and sell high for maximum return.&lt;/li&gt;
&lt;li&gt;Portfolios should be reviewed and rebalanced periodically&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;building-your-portfolio&quot;&gt;Building Your Portfolio &lt;a class=&quot;direct-link&quot; href=&quot;#building-your-portfolio&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Invest regularly&lt;/li&gt;
&lt;li&gt;Diversify&lt;/li&gt;
&lt;li&gt;Manage risk&lt;/li&gt;
&lt;li&gt;Buy low, sell High&lt;/li&gt;
&lt;li&gt;Review and rebalance&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Invest Regularly in Your Knowledge Portfolio&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;goals&quot;&gt;Goals &lt;a class=&quot;direct-link&quot; href=&quot;#goals&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Learn at least one new language every year.&lt;/li&gt;
&lt;li&gt;Read a technical book each quarter.&lt;/li&gt;
&lt;li&gt;Read nontechnical books, too.&lt;/li&gt;
&lt;li&gt;Take classes.&lt;/li&gt;
&lt;li&gt;Participate in local user groups.&lt;/li&gt;
&lt;li&gt;Experiment with different environments.&lt;/li&gt;
&lt;li&gt;Stay current.&lt;/li&gt;
&lt;li&gt;Get wired.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You need to ensure that the knowledge in your portfolio is accurate and unswayed by either vendor or media hype.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Critically Analyze What You Read and Hear&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;communicate&quot;&gt;Communicate &lt;a class=&quot;direct-link&quot; href=&quot;#communicate&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Know what you want to say. Plan what you want to say. Write an outline.&lt;/li&gt;
&lt;li&gt;Know your audience. (WISDOM acrostic)
&lt;ul&gt;
&lt;li&gt;What they &lt;strong&gt;Want&lt;/strong&gt;?&lt;/li&gt;
&lt;li&gt;What is their &lt;strong&gt;Interest&lt;/strong&gt;?&lt;/li&gt;
&lt;li&gt;How &lt;strong&gt;Sophisticated&lt;/strong&gt; are they?&lt;/li&gt;
&lt;li&gt;How much &lt;strong&gt;Detail&lt;/strong&gt; they want?&lt;/li&gt;
&lt;li&gt;Who do you want to &lt;strong&gt;Own&lt;/strong&gt; the information?&lt;/li&gt;
&lt;li&gt;How can you &lt;strong&gt;Motivate&lt;/strong&gt; them to listen?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Choose your moment: Understanding when your audience needs to hear your information.&lt;/li&gt;
&lt;li&gt;Choose a style: Just the facts, large bound reports, a simple memo.&lt;/li&gt;
&lt;li&gt;Make it look good: Add good-looking vehicle to your important ideas and engage your audience.&lt;/li&gt;
&lt;li&gt;Involve your audience: Get their feedback, and pick their brains.&lt;/li&gt;
&lt;li&gt;Be a listener: Encourage people to talk by asking questions.&lt;/li&gt;
&lt;li&gt;Get back to people: Keep people informed afterwards.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;It&#39;s Both What You Say and the Way You Say It&lt;/strong&gt;&lt;/p&gt;
</content>
	</entry>
</feed>
